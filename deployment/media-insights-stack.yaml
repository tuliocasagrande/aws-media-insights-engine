AWSTemplateFormatVersion: "2010-09-09"
Description: Media Insights Engine - Base AWS CloudFormation template that provisions the core Media Insights Engine services and provides parameters for enabling additional functionality.

Parameters:
  AdminEmail:
    Description: Email address for the MIE Administrator
    Type: String

  DevGroupName:
    Type: String
    Description: Name of the developer group
    Default: MieDevelopersGroup

  DeployOperatorLibrary:
    Description: Deploy operator library
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No
  DeployTestWorkflow:
    Description: Deploy test workflow which contains operator, stage and workflow stubs for integration testing
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No
  DeployInstantTranslateWorkflow:
    Description: Deploy Instant Translate Workflow which takes a video as input and transcribes, translates and creates an audio file in the new language
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No
  #  DeployTranscribeWorkflow:
  #    Description: Deploy Transcribe Workflow which takes a video as input and transcribes
  #    Type: String
  #    Default: No
  #    AllowedValues:
  #      - Yes
  #      - No
  DeployAnalyticsPipeline:
    Type: String
    Description: Deploy a metadata streaming pipeline that can be consumed by downstream analytics plaforms
    Default: Yes
    AllowedValues:
      - Yes
      - No
  DeployDemoSite:
    Type: String
    Description: Deploy a front end application to explore extracted metadata
    Default: Yes
    AllowedValues:
      - Yes
      - No
  DeployRekognitionWorkflow:
    Description: Deploy Rekognition Workflows which takes a video as input and transcribes, translates and creates an audio file in the new language
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No
  DeployComprehendWorkflow:
    Description: Deploy a Comprehend Workflow which takes text as input and identifies key entities and phrases
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No
  DeployKitchenSinkWorkflow:
    Description: Deploy the Kitchen Sink Workflow which contains all MIE operators.
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No
  MaxConcurrentWorkflows:
    Type: Number
    Description: Maximum number of workflows to run concurrently.  When the maximum is reached, additional workflows are added to a wait queue.
    Default: 10
    MinValue: 1
  #  TranscriberApp:
  #    Type: String
  #    Description: Deploy a front end transcriber application that takes custom inputs from the user
  #    Default: No
  #    AllowedValues:
  #      - Yes
  #      - No

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      #     -
      #       Label:
      #           default: Control Plane Configuration
      #       Parameters:
      #     -
      #       Label:
      #           default: Data Plane Configuration
      #       Parameters:
      - Label:
          default: System Configuration
        Parameters:
          - AdminEmail
          - MaxConcurrentWorkflows
      - Label:
          default: Operators
        Parameters:
          - DeployOperatorLibrary
      - Label:
          default: Workflows
        Parameters:
          - DeployTestWorkflow
          - DeployInstantTranslateWorkflow
          - DeployRekognitionWorkflow
          #          - DeployTranscribeWorkflow
          - DeployComprehendWorkflow
          - DeployKitchenSinkWorkflow
          - Label:
              default: Analytics
            Parameters:
              - DeployAnalyticsPipeline
      - Label:
          default: Sample Applications
        Parameters:
          - DeployDemoSite
    ParameterLabels:
      DeployOperatorLibrary:
        default: Enable Operator Library Deployment
      TestWorflow:
        default: Enable Test Workflow Deployment
      InstantTranslateWorkflow:
        default: Enable Instant Translate Workflow Deployment
      #      TranscribeWorkflow:
      #        default: Enable Transcribe Workflow Deployment
      RekognitionWorkflow:
        default: Enable Rekognition Workflow Deployment

Conditions:
  DeployOperatorLibraryCondition: !Equals [!Ref DeployOperatorLibrary, Yes]
  DeployTestWorkflowCondition: !Equals [!Ref DeployTestWorkflow, Yes]
  DeployInstantTranslateWorkflowCondition:
    !Equals [!Ref DeployInstantTranslateWorkflow, Yes]
  #  DeployTranscribeWorkflowCondition:
  #  !Equals [!Ref DeployTranscribeWorkflow, Yes]
  DeployRekognitionWorkflowCondition:
    !Equals [!Ref DeployRekognitionWorkflow, Yes]
  DeployComprehendWorkflowCondition:
    !Equals [!Ref DeployComprehendWorkflow, Yes]
  DeployKitchenSinkWorkflowCondition:
    !Equals [!Ref DeployKitchenSinkWorkflow, Yes]
  DeployAnalyticsPipelineCondition: !Equals [!Ref DeployAnalyticsPipeline, Yes]
  DeployDemoSiteCondition: !Equals [!Ref DeployDemoSite, Yes]
  #DeployTranscriberApp: !Equals [!Ref TranscriberApp, Yes]

Mappings:
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      CodeKeyPrefix: "media-insights-solution/%%VERSION%%/code"
      TemplateKeyPrefix: "media-insights-solution/%%VERSION%%/cf"

Resources:
  # IAM Roles
  StepFunctionsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Join ["", ["states.", Ref: "AWS::Region", ".amazonaws.com"]]
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-stepfunctions-service-role"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:lambda:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":",
                      "function:*",
                    ],
                  ]

  StageExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-stage-execution-lambda-role"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                # TODO: Security - Scope this down (should implement tagging on step functions, but this is fine for now
                # since we are only giving start execution access)
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:states:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":stateMachine:",
                      "*",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:DescribeLimits"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:BatchWriteItem"
                Resource:
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowTable",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "WorkflowExecutionTable",
                    ],
                  ]
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowExecutionTable",
                        "/index/",
                        "*",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "SystemTable",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:logs:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":log-group:/aws/lambda/*",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ListQueues
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource:
                  - "Fn::GetAtt":
                      - StageExecutionQueue
                      - Arn
                  - "Fn::GetAtt":
                      - WorkflowExecutionLambdaDeadLetterQueue
                      - Arn

  OperationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-operation-lambda-role"
          PolicyDocument:
            Statement:
              # TODO: Security - Scope this down (should implement tagging on step functions, but this is fine for now
              # since we are only giving start execution access)
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:states:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":stateMachine:",
                      "*",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:DescribeLimits"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:BatchWriteItem"
                Resource:
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowTable",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "WorkflowExecutionTable",
                    ],
                  ]
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowExecutionTable",
                        "/index/",
                        "*",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "SystemTable",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:logs:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":log-group:/aws/lambda/*",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ListQueues
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource:
                  - "Fn::GetAtt":
                      - StageExecutionQueue
                      - Arn
                  - "Fn::GetAtt":
                      - WorkflowExecutionLambdaDeadLetterQueue
                      - Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - "Fn::GetAtt":
                      - WorkflowSchedulerLambda
                      - Arn

  StepFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
      Policies:
        - PolicyName: "TestSFNLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource: "arn:aws:lambda:*:*:function:*"
                Effect: "Allow"

  operatorFailedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "OperatorFailedAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: Allow

  # Services - Dynamodb

  SystemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "System"]]

  WorkflowTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "Workflow"]]

  StageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "Stage"]]

  OperationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "Operation"]]

  HistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Version
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Version
          KeyType: RANGE
      TableName: !Join ["", [Ref: "AWS::StackName", "History"]]

  WorkflowExecutionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: AssetId
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: WorkflowExecutionStatus
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: WorkflowExecutionAssetId
          KeySchema:
            - AttributeName: AssetId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TableName: !Join ["", [Ref: "AWS::StackName", "WorkflowExecution"]]

  DataplaneTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: AssetId
          AttributeType: S
      KeySchema:
        - AttributeName: AssetId
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "DataplaneTable"]]
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"

  # Services - S3
  # TODO: Best Practice - S3 Bucket should have access logging configured, S3 Bucket should have encryption option set
  Dataplane:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["GET", "POST"]
            AllowedOrigins: ["*"]
            Id: AllowUploadsFromWebApp

  # Service - cognito / security infrastructure

  # Super hacky lambda for formatting cognito role mapping since cognito is severely lacking in CF support
  # https://forums.aws.amazon.com/message.jspa?messageID=790437#790437
  # https://stackoverflow.com/questions/53131052/aws-cloudformation-can-not-create-stack-when-awscognitoidentitypoolroleattac

  CognitoRoleMappingTransformer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import cfnresponse


          def handler(event, context):
              print("Event: %s" % json.dumps(event))
              resourceProperties = event["ResourceProperties"]
              responseData = {
                  "RoleMapping": {
                      resourceProperties["IdentityProvider"]: {
                          "Type": resourceProperties["Type"]
                      }
                  }
              }
              if resourceProperties["AmbiguousRoleResolution"]:
                  responseData["RoleMapping"][resourceProperties["IdentityProvider"]]["AmbiguousRoleResolution"] = \
                  resourceProperties["AmbiguousRoleResolution"]

              print(responseData)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Handler: !Join
        - ''
        - - index
          - .handler
      Role: !GetAtt CognitoRoleMapperLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 30

  CognitoRoleMapperLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
  MieUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
          InviteMessageTemplate:
            EmailMessage: !Join ["", [
              "Your username is {username} and temporary password is {####}<br>Stack Name: ",
              Ref: "AWS::StackName",
              "<br>Stack Overview:<br>",
              "https://",
              Ref: "AWS::Region",
              ".console.aws.amazon.com/cloudformation/home?region=",
              Ref: "AWS::Region",
              "#/stacks/stackinfo?stackId=",
              Ref: "AWS::StackId"
            ]]
            EmailSubject: "Welcome to the AWS Media Insights Engine"
      EmailConfiguration:
        EmailSendingAccount: 'COGNITO_DEFAULT'
      AutoVerifiedAttributes: ['email']

  MieCognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref Dataplane
      UserPoolId: !Ref MieUserPool

  MieAdminClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MieUserPool
      ExplicitAuthFlows: ['ADMIN_NO_SRP_AUTH']

  MieWebAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MieUserPool

  MieIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: !Ref MieWebAppClient
          ProviderName: !GetAtt MieUserPool.ProviderName

  # More hacky cfn for getting the role mapping
  TransformedRoleMapping:
    Type: Custom::TransformedRoleMapping
    Properties:
      ServiceToken: !GetAtt CognitoRoleMappingTransformer.Arn
      Type: Token
      AmbiguousRoleResolution: Deny
      IdentityProvider:
        'Fn::Join':
          - ':'
          - - 'Fn::GetAtt':
                - MieUserPool
                - ProviderName
            - Ref: MieWebAppClient

  CognitStandardAuthDefaultRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref MieIdentityPool
              "ForAnyValue:StringEquals":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "MieCognitoAuthNoGroup"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "*"
                Resource: "*"
                Effect: "Deny"

  CognitStandardUnauthDefaultRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref MieIdentityPool
              "ForAnyValue:StringEquals":
                "cognito-identity.amazonaws.com:amr": unauthenticated

  MieIdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref MieIdentityPool
      RoleMappings: !GetAtt TransformedRoleMapping.RoleMapping
      Roles:
        authenticated: !GetAtt CognitStandardAuthDefaultRole.Arn
        unauthenticated: !GetAtt CognitStandardUnauthDefaultRole.Arn

  MieDeveloperGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: 'User group for developers'
      RoleArn: !GetAtt MieDeveloperRole.Arn
      UserPoolId: !Ref MieUserPool
      GroupName: !Ref DevGroupName

  MieDefaultDeveloperAccount:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      UserAttributes: [{"Name": "email", "Value": !Ref AdminEmail}]
      Username: !Ref AdminEmail
      UserPoolId: !Ref MieUserPool

  MieDeveloperRole:
    DependsOn: [MediaInsightsWorkflowApi, MediaInsightsDataplaneApiStack]
    Type: "AWS::IAM::Role"
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref MieIdentityPool
                "ForAnyValue:StringEquals":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "MieDeveloporCognitoPolicy"
            PolicyDocument: !Sub
              - |-
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Action": [
                        "execute-api:Invoke"
                      ],
                      "Effect": "Allow",
                      "Resource": ["arn:aws:execute-api:${region}:${account}:${wfapi}/*/", "arn:aws:execute-api:${region}:${account}:${dataapi}/*/"]
                    }
                  ]
                }
              - {
                region: !Ref "AWS::Region",
                account: !Ref "AWS::AccountId",
                wfapi: !GetAtt MediaInsightsWorkflowApi.Outputs.RestAPIId,
                dataapi: !GetAtt MediaInsightsDataplaneApiStack.Outputs.RestAPIId
              }

  MieAddDevUserToGroup:
    DependsOn: MieDefaultDeveloperAccount
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref MieDeveloperGroup
      Username: !Ref AdminEmail
      UserPoolId: !Ref MieUserPool

  # Services - SQS

  WorkflowExecutionLambdaDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "${AWS::StackName}-WorkflowExecutionLambdaDLQ"
      MessageRetentionPeriod: 43200 # #Maximum, 12 hours in seconds.

  StageExecutionDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "${AWS::StackName}-StageExecutionDLQ"
      MessageRetentionPeriod: 43200 # #Maximum, 12 hours in seconds.

  StageExecutionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-StageExecution"
      VisibilityTimeout: 43200 #Maximum, 12 hours in seconds.  Stages are long running
      ReceiveMessageWaitTimeSeconds: 20 #Maximum, long poll on this queue, it has one reader that is single threaded
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - StageExecutionDeadLetterQueue
            - Arn
        maxReceiveCount: 1 # Don't retry if stage times out

  # Lambda Layers:

  MediaInsightsEnginePython37Layer:
    Type: "AWS::Lambda::LayerVersion"
    DeletionPolicy: Retain
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "media_insights_engine_lambda_layer_python3.7.zip",
            ],
          ]
      Description: Boto3 and MediaInsightsEngineLambdaHelper packages for Python 3.7
      LayerName: !Sub "${AWS::StackName}-media-insights-engine-python37"
      LicenseInfo: Apache-2.0

  MediaInsightsEnginePython36Layer:
    Type: "AWS::Lambda::LayerVersion"
    DeletionPolicy: Retain
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "media_insights_engine_lambda_layer_python3.6.zip",
            ],
          ]
      Description: Boto3 and MediaInsightsEngineLambdaHelper packages for Python 3.6
      LayerName: !Sub "${AWS::StackName}-media-insights-engine-python36"
      LicenseInfo: Apache-2.0

  Boto3Python37LayerPermission:
    Type: "AWS::Lambda::LayerVersionPermission"
    DeletionPolicy: Retain
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref MediaInsightsEnginePython37Layer
      Principal: !Ref AWS::AccountId

  # Services - Lambda

  LambdaSchedule:
    Type: "AWS::Events::Rule"
    DependsOn: WorkflowSchedulerLambda
    Properties:
      Description: >
        A schedule for the Lambda function..
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !Sub ${WorkflowSchedulerLambda.Arn}
          Id: LambdaSchedule

  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub ${WorkflowSchedulerLambda.Arn}
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${LambdaSchedule.Arn}

  WorkflowSchedulerLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-workflow-scheduler"
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
          SYSTEM_TABLE_NAME: !Ref SystemTable
          DEFAULT_MAX_CONCURRENT_WORKFLOWS: !Ref MaxConcurrentWorkflows
      Handler: app.workflow_scheduler_lambda
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - StageExecutionRole
          - Arn
      Runtime: python3.6
      Timeout: 900
      ReservedConcurrentExecutions: 1
      DeadLetterConfig:
        TargetArn:
          Fn::GetAtt:
            - WorkflowExecutionLambdaDeadLetterQueue
            - Arn
    Type: AWS::Lambda::Function

  CompleteStageLambda:
    DependsOn:
      - WorkflowSchedulerLambda
    Properties:
      FunctionName: !Sub "${AWS::StackName}-complete-workflow"
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
          SYSTEM_TABLE_NAME: !Ref SystemTable
          WORKFLOW_SCHEDULER_LAMBDA_ARN:
            Fn::GetAtt:
              - WorkflowSchedulerLambda
              - Arn
      Handler: app.complete_stage_execution_lambda
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - OperationLambdaExecutionRole
          - Arn
      Runtime: python3.6
      Timeout: 900
    Type: AWS::Lambda::Function

  FilterOperationLambda:
    Properties:
      FunctionName: !Sub "${AWS::StackName}-filter-operation"
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
      Handler: app.filter_operation_lambda
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - OperationLambdaExecutionRole
          - Arn
      Runtime: python3.6
      Timeout: 900
    Type: AWS::Lambda::Function

  OperatorFailedLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "operator_failed.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      Role: !GetAtt "operatorFailedRole.Arn"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "operator_failed.zip",
            ],
          ]
      Runtime: "python3.7"

  # DataPlane API Stack
  MediaInsightsDataplaneApiStack:
    DependsOn: MieUserPool
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "media-insights-dataplane-api-stack.template",
          ],
        ]
      Parameters:
        DataplaneTableName: !Ref DataplaneTable
        DataplaneBucketName: !Ref Dataplane
        UserPoolArn: !GetAtt MieUserPool.Arn
        DeploymentPackageBucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        DeploymentPackageKey:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "dataplaneapi.zip",
            ],
          ]

  Analytics:
    Type: "AWS::CloudFormation::Stack"
    Condition: DeployAnalyticsPipelineCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "media-insights-dataplane-streaming-stack.template",
          ],
        ]
      Parameters:
        DynamoStreamArn:
          Fn::GetAtt:
            - DataplaneTable
            - StreamArn
        DynamoTableArn: !GetAtt DataplaneTable.Arn
        DeployElasticConsumer: Yes
        DataplaneBucket: !Ref Dataplane
        MieAdminRole: !GetAtt MieDeveloperRole.Arn
        ShortUUID: !GetAtt GetShortUUID.Data

  # Workflow creation and execution API
  MediaInsightsWorkflowApi:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "media-insights-workflowapi-stack.template",
          ],
        ]
      Parameters:
        UserPoolArn: !GetAtt MieUserPool.Arn
        StageExecutionQueueUrl: !Ref StageExecutionQueue
        StageExecutionRole: !GetAtt StepFunctionRole.Arn
        OperationTableName: !Ref OperationTable
        StageTableName: !Ref StageTable
        WorkflowExecutionTableName: !Ref WorkflowExecutionTable
        WorkflowTableName: !Ref WorkflowTable
        HistoryTableName: !Ref HistoryTable
        SystemTableName: !Ref SystemTable
        SqsQueueArn: !GetAtt StageExecutionQueue.Arn
        CompleteStageLambdaArn:
          Fn::GetAtt:
            - CompleteStageLambda
            - Arn
        FilterOperationLambdaArn:
          Fn::GetAtt:
            - FilterOperationLambda
            - Arn
        WorkflowSchedulerLambdaArn:
          Fn::GetAtt:
            - WorkflowSchedulerLambda
            - Arn
        DataplaneEndpoint:
          Fn::GetAtt:
            - MediaInsightsDataplaneApiStack
            - Outputs.APIHandlerName
        DataplaneHandlerArn:
          Fn::GetAtt:
            - MediaInsightsDataplaneApiStack
            - Outputs.APIHandlerArn
        DataPlaneBucket: !Ref Dataplane
        OperatorFailedHandlerLambdaArn: !GetAtt OperatorFailedLambda.Arn
        DeploymentPackageBucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        DeploymentPackageKey:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflowapi.zip",
            ],
          ]

  # LambdaFunctionEventSourceMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     BatchSize: 1
  #     Enabled: true
  #     EventSourceArn: !GetAtt StageExecutionQueue.Arn
  #     FunctionName: !GetAtt MediaInsightsWorkflowApi.Outputs.ExecuteStageLambdaArn

  OperatorLibrary:
    Condition: DeployOperatorLibraryCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "media-insights-operator-library.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        DataPlaneEndpoint: !GetAtt MediaInsightsDataplaneApiStack.Outputs.APIHandlerName
        DataPlaneHandlerArn: !GetAtt MediaInsightsDataplaneApiStack.Outputs.APIHandlerArn
        DataPlaneBucket: !Ref Dataplane
        MediaInsightsEnginePython37Layer: !Ref MediaInsightsEnginePython37Layer
        ShortUUID: !GetAtt GetShortUUID.Data

  TestWorkflow:
    Condition: DeployTestWorkflowCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
      - OperatorLibrary
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "media-insights-test-operations-stack.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        DataplaneEndpoint:
          Fn::GetAtt:
            - MediaInsightsDataplaneApiStack
            - Outputs.APIHandlerName
        DataPlaneBucket: !Ref Dataplane
        MediaInsightsEnginePython37Layer: !Ref MediaInsightsEnginePython37Layer
        StepfunctionRole: !GetAtt StepFunctionRole.Arn

  InstantTranslateWorkflow:
    Condition: DeployInstantTranslateWorkflowCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
      - OperatorLibrary
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "instant_translate.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        OperatorLibraryStack: !GetAtt OperatorLibrary.Outputs.StackName
        ShortUUID: !GetAtt GetShortUUID.Data

  #  TranscribeWorkflow:
  #    Condition: DeployTranscribeWorkflowCondition
  #    DependsOn:
  #      - MediaInsightsWorkflowApi
  #      - MediaInsightsDataplaneApiStack
  #    Type: "AWS::CloudFormation::Stack"
  #    Properties:
  #      TemplateURL:
  #        !Join [
  #          "/",
  #          [
  #            "https://s3.amazonaws.com",
  #            !FindInMap ["SourceCode", "General", "S3Bucket"],
  #            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
  #            "transcribe.template",
  #          ],
  #        ]
  #      Parameters:
  #        WorkflowCustomResourceArn:
  #          Fn::GetAtt:
  #            - MediaInsightsWorkflowApi
  #            - Outputs.WorkflowCustomResourceArn
  #        OperatorLibraryStack: !GetAtt OperatorLibrary.Outputs.StackName
  #        ShortUUID: !GetAtt GetShortUUID.Data

  RekognitionWorkflow:
    Condition: DeployRekognitionWorkflowCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
      - OperatorLibrary
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "rekognition.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        OperatorLibraryStack: !GetAtt OperatorLibrary.Outputs.StackName
        ShortUUID: !GetAtt GetShortUUID.Data

  ComprehendWorkflow:
    Condition: DeployComprehendWorkflowCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
      - OperatorLibrary
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "comprehend.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        OperatorLibraryStack: !GetAtt OperatorLibrary.Outputs.StackName
        ShortUUID: !GetAtt GetShortUUID.Data

  KitchenSinkWorkflow:
    Condition: DeployKitchenSinkWorkflowCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
      - OperatorLibrary
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "MieCompleteWorkflow.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        OperatorLibraryStack: !GetAtt OperatorLibrary.Outputs.StackName
        ShortUUID: !GetAtt GetShortUUID.Data

  # Auto build/deploy webapp

  MediaInsightsWebApp:
    Condition: DeployDemoSiteCondition
    DependsOn:
      - Analytics
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "/",
          [
            "https://s3.amazonaws.com",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "media-insights-webapp.template",
          ],
        ]
      Parameters:
        DataplaneEndpoint: !GetAtt MediaInsightsDataplaneApiStack.Outputs.EndpointURL
        WorkflowEndpoint: !GetAtt MediaInsightsWorkflowApi.Outputs.EndpointURL
        ElasticEndpoint: !GetAtt Analytics.Outputs.ElasticUrl
        DataplaneBucket: !Ref Dataplane
        UserPoolId: !Ref MieUserPool
        IdentityPoolId: !Ref MieIdentityPool
        AwsRegion: !Ref "AWS::Region"
        PoolClientId: !Ref MieWebAppClient

#  TranscriberWebApp:
#    Condition: DeployTranscriberApp
#    DependsOn:
#      - TranscribeWorkflow
#    Type: "AWS::CloudFormation::Stack"
#    Properties:
#      TemplateURL:
#        !Join [
#          "/",
#          [
#            "https://s3.amazonaws.com",
#            !FindInMap ["SourceCode", "General", "S3Bucket"],
#            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
#            "transcriber-webapp.template",
#          ],
#        ]
#      Parameters:
#        ControlPlaneApiEndpoint:
#          Fn::GetAtt:
#            - MediaInsightsWorkflowApi
#            - Outputs.EndpointURL
#        DataPlaneApiEndpoint:
#          Fn::GetAtt:
#            - MediaInsightsDataplaneApiStack
#            - Outputs.EndpointURL
#        DataPlaneBucket: !Ref DataplaneBucket

  # Helper function - create a short UUID to avoid name conflicts
  # TODO: move to a separate template?
  MieHelperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:*']
                Resource: 'arn:aws:logs:*:*:*'
  MieHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import string
          import random

          import cfnresponse

          def id_generator(size=6, chars=string.ascii_lowercase + string.digits):
              return "".join(random.choices(chars, k=size))

          def handler(event, context):
              response_data = {'Data': id_generator()}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")

      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt MieHelperExecutionRole.Arn
  MieHelperFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MieHelperFunction.Arn
      Principal: 'cloudformation.amazonaws.com'
  GetShortUUID:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt MieHelperFunction.Arn

Outputs:
  DataplaneBucket:
    Description: Bucket used to store transfomred media object from workflow execution
    Value: !Ref Dataplane
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DataplaneBucket]]
  DataplaneApiEndpoint:
    Description: Endpoint for data persisitence API
    Value: !GetAtt MediaInsightsDataplaneApiStack.Outputs.EndpointURL
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DataplaneApiEndpoint]]
  WorkflowCustomResourceArn:
    Description: Custom resource for creating operations, stages and workflows using CloudFormation
    Value: !GetAtt MediaInsightsWorkflowApi.Outputs.WorkflowCustomResourceArn
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WorkflowCustomResourceArn]]
  WorkflowApiEndpoint:
    Description: Endpoint for workflow Creation, Execution and Monitoring API
    Value: !GetAtt MediaInsightsWorkflowApi.Outputs.EndpointURL
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WorkflowApiEndpoint]]
  MediaInsightsWebAppUrl:
    Condition: DeployDemoSiteCondition
    Description: Url of the Media Insights Engine sample web application
    Value: !GetAtt MediaInsightsWebApp.Outputs.CloudfrontUrl
  ElasticsearchEndpoint:
    Condition: DeployAnalyticsPipelineCondition
    Description: Endpoint for elasticsearch cluster
    Value: !GetAtt Analytics.Outputs.ElasticUrl
  MediaInsightsEnginePython37Layer:
    Description: Lambda layer for Python libraries
    Value: !Ref MediaInsightsEnginePython37Layer
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", MediaInsightsEnginePython37Layer]]
  TestStack:
    Condition: DeployTestWorkflowCondition
    Value: !Ref TestWorkflow
  UserPoolId:
    Description: ID of the MIE Cognito User Pool
    Value: !Ref MieUserPool
  AdminClientId:
    Description: ID of the Admin Cognito Client. This can be used to authenticate command-line apps using boto3.
    Value: !Ref MieAdminClient
  WebAppClientId:
    Description: ID of the Webapp Cognito Client. This can be used to authenticate web apps using Amplify.
    Value: !Ref MieWebAppClient
  AdminUsername:
    Description: Username of the default MIE admin
    Value: !Ref AdminEmail
